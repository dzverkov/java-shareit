create table if not exists USERS
(
    ID    BIGINT generated by default as identity,
    NAME  CHARACTER VARYING(50) not null,
    EMAIL CHARACTER VARYING(50) not null
        constraint USERS_UK
            unique,
    constraint USERS_PK
        primary key (ID)
);

create table if not exists REQUESTS
(
    id           bigint generated by default as identity,
    description  varchar(255) not null,
    requestor_id bigint not null,
    created      timestamp without time zone not null,
    constraint requests_pk
        primary key (id),
    constraint requests_users_fk
        foreign key (requestor_id) references USERS (ID)
);

create table if not exists ITEMS(
    id              bigint generated by default as identity,
    name            varchar(50),
    description     varchar(255),
    is_available    boolean,
    owner_id        bigint not null,
    request_id      bigint,
    constraint items_pk
        primary key (id),
    constraint items_users_fk
        foreign key (owner_id) references USERS (ID),
    constraint items_request_fk
        foreign key (request_id) references REQUESTS (ID)
);

create table if not exists BOOKINGS(
    id              bigint generated by default as identity,
    start_date      timestamp without time zone,
    end_date        timestamp without time zone,
    item_id         bigint not null,
    booker_id       bigint not null,
    status          varchar(30),
    constraint bookings_pk
        primary key (id),
    constraint bookings_items_fk
        foreign key (item_id) references ITEMS (ID),
    constraint bookings_users_fk
        foreign key (booker_id) references USERS (ID)
);

create table if not exists COMMENTS(
    id bigint generated by default as identity,
    text Varchar(4096),
    item_id bigint not null ,
    author_id bigint not null,
    created timestamp without time zone,
    constraint comments_pk
        primary key (id),
    constraint comments_items_fk
        foreign key (item_id) references ITEMS(ID),
    constraint comments_users_fk
        foreign key (author_id) references USERS(ID)
);
